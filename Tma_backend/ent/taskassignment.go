// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Tma_backend/ent/task"
	"Tma_backend/ent/taskassignment"
	"Tma_backend/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TaskAssignment is the model entity for the TaskAssignment schema.
type TaskAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uint64 `json:"task_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Status holds the value of the "status" field.
	Status taskassignment.Status `json:"status,omitempty"`
	// AssignedAt holds the value of the "assigned_at" field.
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskAssignmentQuery when eager-loading is set.
	Edges        TaskAssignmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskAssignmentEdges holds the relations/edges for other nodes in the graph.
type TaskAssignmentEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskAssignmentEdges) TaskOrErr() (*Task, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskAssignmentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskassignment.FieldID, taskassignment.FieldTaskID, taskassignment.FieldUserID:
			values[i] = new(sql.NullInt64)
		case taskassignment.FieldStatus:
			values[i] = new(sql.NullString)
		case taskassignment.FieldAssignedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskAssignment fields.
func (ta *TaskAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskassignment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ta.ID = uint64(value.Int64)
		case taskassignment.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				ta.TaskID = uint64(value.Int64)
			}
		case taskassignment.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ta.UserID = uint64(value.Int64)
			}
		case taskassignment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ta.Status = taskassignment.Status(value.String)
			}
		case taskassignment.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				ta.AssignedAt = value.Time
			}
		default:
			ta.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskAssignment.
// This includes values selected through modifiers, order, etc.
func (ta *TaskAssignment) Value(name string) (ent.Value, error) {
	return ta.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the TaskAssignment entity.
func (ta *TaskAssignment) QueryTask() *TaskQuery {
	return NewTaskAssignmentClient(ta.config).QueryTask(ta)
}

// QueryUser queries the "user" edge of the TaskAssignment entity.
func (ta *TaskAssignment) QueryUser() *UserQuery {
	return NewTaskAssignmentClient(ta.config).QueryUser(ta)
}

// Update returns a builder for updating this TaskAssignment.
// Note that you need to call TaskAssignment.Unwrap() before calling this method if this TaskAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ta *TaskAssignment) Update() *TaskAssignmentUpdateOne {
	return NewTaskAssignmentClient(ta.config).UpdateOne(ta)
}

// Unwrap unwraps the TaskAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ta *TaskAssignment) Unwrap() *TaskAssignment {
	_tx, ok := ta.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskAssignment is not a transactional entity")
	}
	ta.config.driver = _tx.drv
	return ta
}

// String implements the fmt.Stringer.
func (ta *TaskAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("TaskAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ta.ID))
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", ta.TaskID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ta.UserID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ta.Status))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(ta.AssignedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskAssignments is a parsable slice of TaskAssignment.
type TaskAssignments []*TaskAssignment
