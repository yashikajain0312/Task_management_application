// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Tma_backend/ent/task"
	"Tma_backend/ent/taskassignment"
	"Tma_backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskAssignmentCreate is the builder for creating a TaskAssignment entity.
type TaskAssignmentCreate struct {
	config
	mutation *TaskAssignmentMutation
	hooks    []Hook
}

// SetTaskID sets the "task_id" field.
func (tac *TaskAssignmentCreate) SetTaskID(u uint64) *TaskAssignmentCreate {
	tac.mutation.SetTaskID(u)
	return tac
}

// SetUserID sets the "user_id" field.
func (tac *TaskAssignmentCreate) SetUserID(u uint64) *TaskAssignmentCreate {
	tac.mutation.SetUserID(u)
	return tac
}

// SetStatus sets the "status" field.
func (tac *TaskAssignmentCreate) SetStatus(t taskassignment.Status) *TaskAssignmentCreate {
	tac.mutation.SetStatus(t)
	return tac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tac *TaskAssignmentCreate) SetNillableStatus(t *taskassignment.Status) *TaskAssignmentCreate {
	if t != nil {
		tac.SetStatus(*t)
	}
	return tac
}

// SetAssignedAt sets the "assigned_at" field.
func (tac *TaskAssignmentCreate) SetAssignedAt(t time.Time) *TaskAssignmentCreate {
	tac.mutation.SetAssignedAt(t)
	return tac
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (tac *TaskAssignmentCreate) SetNillableAssignedAt(t *time.Time) *TaskAssignmentCreate {
	if t != nil {
		tac.SetAssignedAt(*t)
	}
	return tac
}

// SetID sets the "id" field.
func (tac *TaskAssignmentCreate) SetID(u uint64) *TaskAssignmentCreate {
	tac.mutation.SetID(u)
	return tac
}

// SetTask sets the "task" edge to the Task entity.
func (tac *TaskAssignmentCreate) SetTask(t *Task) *TaskAssignmentCreate {
	return tac.SetTaskID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tac *TaskAssignmentCreate) SetUser(u *User) *TaskAssignmentCreate {
	return tac.SetUserID(u.ID)
}

// Mutation returns the TaskAssignmentMutation object of the builder.
func (tac *TaskAssignmentCreate) Mutation() *TaskAssignmentMutation {
	return tac.mutation
}

// Save creates the TaskAssignment in the database.
func (tac *TaskAssignmentCreate) Save(ctx context.Context) (*TaskAssignment, error) {
	tac.defaults()
	return withHooks(ctx, tac.sqlSave, tac.mutation, tac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tac *TaskAssignmentCreate) SaveX(ctx context.Context) *TaskAssignment {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *TaskAssignmentCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *TaskAssignmentCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tac *TaskAssignmentCreate) defaults() {
	if _, ok := tac.mutation.Status(); !ok {
		v := taskassignment.DefaultStatus
		tac.mutation.SetStatus(v)
	}
	if _, ok := tac.mutation.AssignedAt(); !ok {
		v := taskassignment.DefaultAssignedAt()
		tac.mutation.SetAssignedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *TaskAssignmentCreate) check() error {
	if _, ok := tac.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "TaskAssignment.task_id"`)}
	}
	if _, ok := tac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "TaskAssignment.user_id"`)}
	}
	if _, ok := tac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TaskAssignment.status"`)}
	}
	if v, ok := tac.mutation.Status(); ok {
		if err := taskassignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TaskAssignment.status": %w`, err)}
		}
	}
	if _, ok := tac.mutation.AssignedAt(); !ok {
		return &ValidationError{Name: "assigned_at", err: errors.New(`ent: missing required field "TaskAssignment.assigned_at"`)}
	}
	if v, ok := tac.mutation.ID(); ok {
		if err := taskassignment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "TaskAssignment.id": %w`, err)}
		}
	}
	if _, ok := tac.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "TaskAssignment.task"`)}
	}
	if _, ok := tac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "TaskAssignment.user"`)}
	}
	return nil
}

func (tac *TaskAssignmentCreate) sqlSave(ctx context.Context) (*TaskAssignment, error) {
	if err := tac.check(); err != nil {
		return nil, err
	}
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	tac.mutation.id = &_node.ID
	tac.mutation.done = true
	return _node, nil
}

func (tac *TaskAssignmentCreate) createSpec() (*TaskAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskAssignment{config: tac.config}
		_spec = sqlgraph.NewCreateSpec(taskassignment.Table, sqlgraph.NewFieldSpec(taskassignment.FieldID, field.TypeUint64))
	)
	if id, ok := tac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tac.mutation.Status(); ok {
		_spec.SetField(taskassignment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tac.mutation.AssignedAt(); ok {
		_spec.SetField(taskassignment.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if nodes := tac.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.TaskTable,
			Columns: []string{taskassignment.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.UserTable,
			Columns: []string{taskassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskAssignmentCreateBulk is the builder for creating many TaskAssignment entities in bulk.
type TaskAssignmentCreateBulk struct {
	config
	err      error
	builders []*TaskAssignmentCreate
}

// Save creates the TaskAssignment entities in the database.
func (tacb *TaskAssignmentCreateBulk) Save(ctx context.Context) ([]*TaskAssignment, error) {
	if tacb.err != nil {
		return nil, tacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*TaskAssignment, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *TaskAssignmentCreateBulk) SaveX(ctx context.Context) []*TaskAssignment {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *TaskAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *TaskAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}
