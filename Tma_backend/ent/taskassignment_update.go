// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Tma_backend/ent/predicate"
	"Tma_backend/ent/task"
	"Tma_backend/ent/taskassignment"
	"Tma_backend/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskAssignmentUpdate is the builder for updating TaskAssignment entities.
type TaskAssignmentUpdate struct {
	config
	hooks    []Hook
	mutation *TaskAssignmentMutation
}

// Where appends a list predicates to the TaskAssignmentUpdate builder.
func (tau *TaskAssignmentUpdate) Where(ps ...predicate.TaskAssignment) *TaskAssignmentUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetTaskID sets the "task_id" field.
func (tau *TaskAssignmentUpdate) SetTaskID(u uint64) *TaskAssignmentUpdate {
	tau.mutation.SetTaskID(u)
	return tau
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tau *TaskAssignmentUpdate) SetNillableTaskID(u *uint64) *TaskAssignmentUpdate {
	if u != nil {
		tau.SetTaskID(*u)
	}
	return tau
}

// SetUserID sets the "user_id" field.
func (tau *TaskAssignmentUpdate) SetUserID(u uint64) *TaskAssignmentUpdate {
	tau.mutation.SetUserID(u)
	return tau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tau *TaskAssignmentUpdate) SetNillableUserID(u *uint64) *TaskAssignmentUpdate {
	if u != nil {
		tau.SetUserID(*u)
	}
	return tau
}

// SetStatus sets the "status" field.
func (tau *TaskAssignmentUpdate) SetStatus(t taskassignment.Status) *TaskAssignmentUpdate {
	tau.mutation.SetStatus(t)
	return tau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tau *TaskAssignmentUpdate) SetNillableStatus(t *taskassignment.Status) *TaskAssignmentUpdate {
	if t != nil {
		tau.SetStatus(*t)
	}
	return tau
}

// SetAssignedAt sets the "assigned_at" field.
func (tau *TaskAssignmentUpdate) SetAssignedAt(t time.Time) *TaskAssignmentUpdate {
	tau.mutation.SetAssignedAt(t)
	return tau
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (tau *TaskAssignmentUpdate) SetNillableAssignedAt(t *time.Time) *TaskAssignmentUpdate {
	if t != nil {
		tau.SetAssignedAt(*t)
	}
	return tau
}

// SetTask sets the "task" edge to the Task entity.
func (tau *TaskAssignmentUpdate) SetTask(t *Task) *TaskAssignmentUpdate {
	return tau.SetTaskID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tau *TaskAssignmentUpdate) SetUser(u *User) *TaskAssignmentUpdate {
	return tau.SetUserID(u.ID)
}

// Mutation returns the TaskAssignmentMutation object of the builder.
func (tau *TaskAssignmentUpdate) Mutation() *TaskAssignmentMutation {
	return tau.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tau *TaskAssignmentUpdate) ClearTask() *TaskAssignmentUpdate {
	tau.mutation.ClearTask()
	return tau
}

// ClearUser clears the "user" edge to the User entity.
func (tau *TaskAssignmentUpdate) ClearUser() *TaskAssignmentUpdate {
	tau.mutation.ClearUser()
	return tau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TaskAssignmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TaskAssignmentUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TaskAssignmentUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TaskAssignmentUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TaskAssignmentUpdate) check() error {
	if v, ok := tau.mutation.Status(); ok {
		if err := taskassignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TaskAssignment.status": %w`, err)}
		}
	}
	if _, ok := tau.mutation.TaskID(); tau.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskAssignment.task"`)
	}
	if _, ok := tau.mutation.UserID(); tau.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskAssignment.user"`)
	}
	return nil
}

func (tau *TaskAssignmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskassignment.Table, taskassignment.Columns, sqlgraph.NewFieldSpec(taskassignment.FieldID, field.TypeUint64))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.Status(); ok {
		_spec.SetField(taskassignment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tau.mutation.AssignedAt(); ok {
		_spec.SetField(taskassignment.FieldAssignedAt, field.TypeTime, value)
	}
	if tau.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.TaskTable,
			Columns: []string{taskassignment.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.TaskTable,
			Columns: []string{taskassignment.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.UserTable,
			Columns: []string{taskassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.UserTable,
			Columns: []string{taskassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TaskAssignmentUpdateOne is the builder for updating a single TaskAssignment entity.
type TaskAssignmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskAssignmentMutation
}

// SetTaskID sets the "task_id" field.
func (tauo *TaskAssignmentUpdateOne) SetTaskID(u uint64) *TaskAssignmentUpdateOne {
	tauo.mutation.SetTaskID(u)
	return tauo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tauo *TaskAssignmentUpdateOne) SetNillableTaskID(u *uint64) *TaskAssignmentUpdateOne {
	if u != nil {
		tauo.SetTaskID(*u)
	}
	return tauo
}

// SetUserID sets the "user_id" field.
func (tauo *TaskAssignmentUpdateOne) SetUserID(u uint64) *TaskAssignmentUpdateOne {
	tauo.mutation.SetUserID(u)
	return tauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tauo *TaskAssignmentUpdateOne) SetNillableUserID(u *uint64) *TaskAssignmentUpdateOne {
	if u != nil {
		tauo.SetUserID(*u)
	}
	return tauo
}

// SetStatus sets the "status" field.
func (tauo *TaskAssignmentUpdateOne) SetStatus(t taskassignment.Status) *TaskAssignmentUpdateOne {
	tauo.mutation.SetStatus(t)
	return tauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tauo *TaskAssignmentUpdateOne) SetNillableStatus(t *taskassignment.Status) *TaskAssignmentUpdateOne {
	if t != nil {
		tauo.SetStatus(*t)
	}
	return tauo
}

// SetAssignedAt sets the "assigned_at" field.
func (tauo *TaskAssignmentUpdateOne) SetAssignedAt(t time.Time) *TaskAssignmentUpdateOne {
	tauo.mutation.SetAssignedAt(t)
	return tauo
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (tauo *TaskAssignmentUpdateOne) SetNillableAssignedAt(t *time.Time) *TaskAssignmentUpdateOne {
	if t != nil {
		tauo.SetAssignedAt(*t)
	}
	return tauo
}

// SetTask sets the "task" edge to the Task entity.
func (tauo *TaskAssignmentUpdateOne) SetTask(t *Task) *TaskAssignmentUpdateOne {
	return tauo.SetTaskID(t.ID)
}

// SetUser sets the "user" edge to the User entity.
func (tauo *TaskAssignmentUpdateOne) SetUser(u *User) *TaskAssignmentUpdateOne {
	return tauo.SetUserID(u.ID)
}

// Mutation returns the TaskAssignmentMutation object of the builder.
func (tauo *TaskAssignmentUpdateOne) Mutation() *TaskAssignmentMutation {
	return tauo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tauo *TaskAssignmentUpdateOne) ClearTask() *TaskAssignmentUpdateOne {
	tauo.mutation.ClearTask()
	return tauo
}

// ClearUser clears the "user" edge to the User entity.
func (tauo *TaskAssignmentUpdateOne) ClearUser() *TaskAssignmentUpdateOne {
	tauo.mutation.ClearUser()
	return tauo
}

// Where appends a list predicates to the TaskAssignmentUpdate builder.
func (tauo *TaskAssignmentUpdateOne) Where(ps ...predicate.TaskAssignment) *TaskAssignmentUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TaskAssignmentUpdateOne) Select(field string, fields ...string) *TaskAssignmentUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TaskAssignment entity.
func (tauo *TaskAssignmentUpdateOne) Save(ctx context.Context) (*TaskAssignment, error) {
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TaskAssignmentUpdateOne) SaveX(ctx context.Context) *TaskAssignment {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TaskAssignmentUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TaskAssignmentUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TaskAssignmentUpdateOne) check() error {
	if v, ok := tauo.mutation.Status(); ok {
		if err := taskassignment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TaskAssignment.status": %w`, err)}
		}
	}
	if _, ok := tauo.mutation.TaskID(); tauo.mutation.TaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskAssignment.task"`)
	}
	if _, ok := tauo.mutation.UserID(); tauo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "TaskAssignment.user"`)
	}
	return nil
}

func (tauo *TaskAssignmentUpdateOne) sqlSave(ctx context.Context) (_node *TaskAssignment, err error) {
	if err := tauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskassignment.Table, taskassignment.Columns, sqlgraph.NewFieldSpec(taskassignment.FieldID, field.TypeUint64))
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskAssignment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskassignment.FieldID)
		for _, f := range fields {
			if !taskassignment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.Status(); ok {
		_spec.SetField(taskassignment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tauo.mutation.AssignedAt(); ok {
		_spec.SetField(taskassignment.FieldAssignedAt, field.TypeTime, value)
	}
	if tauo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.TaskTable,
			Columns: []string{taskassignment.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.TaskTable,
			Columns: []string{taskassignment.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.UserTable,
			Columns: []string{taskassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskassignment.UserTable,
			Columns: []string{taskassignment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskAssignment{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskassignment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
