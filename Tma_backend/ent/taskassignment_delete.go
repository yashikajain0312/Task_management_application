// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Tma_backend/ent/predicate"
	"Tma_backend/ent/taskassignment"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskAssignmentDelete is the builder for deleting a TaskAssignment entity.
type TaskAssignmentDelete struct {
	config
	hooks    []Hook
	mutation *TaskAssignmentMutation
}

// Where appends a list predicates to the TaskAssignmentDelete builder.
func (tad *TaskAssignmentDelete) Where(ps ...predicate.TaskAssignment) *TaskAssignmentDelete {
	tad.mutation.Where(ps...)
	return tad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tad *TaskAssignmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tad.sqlExec, tad.mutation, tad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tad *TaskAssignmentDelete) ExecX(ctx context.Context) int {
	n, err := tad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tad *TaskAssignmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(taskassignment.Table, sqlgraph.NewFieldSpec(taskassignment.FieldID, field.TypeUint64))
	if ps := tad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tad.mutation.done = true
	return affected, err
}

// TaskAssignmentDeleteOne is the builder for deleting a single TaskAssignment entity.
type TaskAssignmentDeleteOne struct {
	tad *TaskAssignmentDelete
}

// Where appends a list predicates to the TaskAssignmentDelete builder.
func (tado *TaskAssignmentDeleteOne) Where(ps ...predicate.TaskAssignment) *TaskAssignmentDeleteOne {
	tado.tad.mutation.Where(ps...)
	return tado
}

// Exec executes the deletion query.
func (tado *TaskAssignmentDeleteOne) Exec(ctx context.Context) error {
	n, err := tado.tad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{taskassignment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tado *TaskAssignmentDeleteOne) ExecX(ctx context.Context) {
	if err := tado.Exec(ctx); err != nil {
		panic(err)
	}
}
